// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/kl09/counter-api"
	"sync"
)

// Ensure, that StatsCounterMock does implement domain.StatsCounter.
// If this is not the case, regenerate this file with moq.
var _ domain.StatsCounter = &StatsCounterMock{}

// StatsCounterMock is a mock implementation of domain.StatsCounter.
//
//	func TestSomethingThatUsesStatsCounter(t *testing.T) {
//
//		// make and configure a mocked domain.StatsCounter
//		mockedStatsCounter := &StatsCounterMock{
//			DecrementFunc: func(key string)  {
//				panic("mock out the Decrement method")
//			},
//			GetFunc: func(key string) int64 {
//				panic("mock out the Get method")
//			},
//			IncrementFunc: func(key string)  {
//				panic("mock out the Increment method")
//			},
//			ResetFunc: func(key string)  {
//				panic("mock out the Reset method")
//			},
//		}
//
//		// use mockedStatsCounter in code that requires domain.StatsCounter
//		// and then make assertions.
//
//	}
type StatsCounterMock struct {
	// DecrementFunc mocks the Decrement method.
	DecrementFunc func(key string)

	// GetFunc mocks the Get method.
	GetFunc func(key string) int64

	// IncrementFunc mocks the Increment method.
	IncrementFunc func(key string)

	// ResetFunc mocks the Reset method.
	ResetFunc func(key string)

	// calls tracks calls to the methods.
	calls struct {
		// Decrement holds details about calls to the Decrement method.
		Decrement []struct {
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Increment holds details about calls to the Increment method.
		Increment []struct {
			// Key is the key argument value.
			Key string
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
			// Key is the key argument value.
			Key string
		}
	}
	lockDecrement sync.RWMutex
	lockGet       sync.RWMutex
	lockIncrement sync.RWMutex
	lockReset     sync.RWMutex
}

// Decrement calls DecrementFunc.
func (mock *StatsCounterMock) Decrement(key string) {
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockDecrement.Lock()
	mock.calls.Decrement = append(mock.calls.Decrement, callInfo)
	mock.lockDecrement.Unlock()
	if mock.DecrementFunc == nil {
		return
	}
	mock.DecrementFunc(key)
}

// DecrementCalls gets all the calls that were made to Decrement.
// Check the length with:
//
//	len(mockedStatsCounter.DecrementCalls())
func (mock *StatsCounterMock) DecrementCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockDecrement.RLock()
	calls = mock.calls.Decrement
	mock.lockDecrement.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StatsCounterMock) Get(key string) int64 {
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			nOut int64
		)
		return nOut
	}
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedStatsCounter.GetCalls())
func (mock *StatsCounterMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Increment calls IncrementFunc.
func (mock *StatsCounterMock) Increment(key string) {
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockIncrement.Lock()
	mock.calls.Increment = append(mock.calls.Increment, callInfo)
	mock.lockIncrement.Unlock()
	if mock.IncrementFunc == nil {
		return
	}
	mock.IncrementFunc(key)
}

// IncrementCalls gets all the calls that were made to Increment.
// Check the length with:
//
//	len(mockedStatsCounter.IncrementCalls())
func (mock *StatsCounterMock) IncrementCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockIncrement.RLock()
	calls = mock.calls.Increment
	mock.lockIncrement.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *StatsCounterMock) Reset(key string) {
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	if mock.ResetFunc == nil {
		return
	}
	mock.ResetFunc(key)
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedStatsCounter.ResetCalls())
func (mock *StatsCounterMock) ResetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}
